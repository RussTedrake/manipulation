import unittest
import timeout_decorator
from gradescope_utils.autograder_utils.decorators import weight
import pydrake.symbolic as ps
import numpy as np


class TestDifferentialIK(unittest.TestCase):

    def __init__(self, test_name, notebook_locals):
        super().__init__(test_name)
        self.notebook_locals = notebook_locals

    @weight(4)
    @timeout_decorator.timeout(1.)
    def test_diffik_qp(self):
        """Test DiffIKQP"""
        f = self.notebook_locals["DiffIKQP"]

        # Test 1. Test normal solutions for reasonable values of Jacobians

        V_G_desired = np.array([0., 0., 0., 0.1, 0., 0.])

        J_G_lst = np.array(  # noqa
            [[[
                0.00000000e+00, 9.99999642e-01, 8.44270175e-05, -9.99999609e-01,
                8.50532145e-04, 9.99999615e-01, 1.91907330e-04
            ],
              [
                  0.00000000e+00, 8.45678572e-04, -9.98334239e-02,
                  -8.83760055e-04, -9.63557804e-01, 8.77540301e-04,
                  -2.39249258e-01
              ],
              [
                  1.00000000e+00, 1.29333461e-17, 9.95004161e-01,
                  -3.82089622e-06, 2.67498850e-01, -1.85833036e-05,
                  -9.70958164e-01
              ],
              [
                  4.71358776e-01, 2.66827311e-04, 4.37504643e-01,
                  7.08069516e-05, 1.94416991e-01, -1.66589437e-04,
                  6.93889390e-18
              ],
              [
                  4.10842161e-04, -3.15518477e-01, 3.82151366e-04,
                  -8.19855419e-02, 1.70608810e-04, 1.88851289e-01,
                  6.77626358e-21
              ],
              [
                  0.00000000e+00, -4.71358955e-01, 1.22036394e-06,
                  4.31475488e-01, -3.61291136e-06, -4.65339956e-02,
                  8.47032947e-22
              ]],
             [[
                 0.00000000e+00, 9.85778224e-01, 2.34348632e-02,
                 -9.59682197e-01, 2.65804689e-01, 9.63955874e-01, 3.27824222e-04
             ],
              [
                  0.00000000e+00, 1.68051459e-01, -1.37467285e-01,
                  -2.80617532e-01, -9.24784122e-01, 2.58393922e-01,
                  -2.39505562e-01
              ],
              [
                  1.00000000e+00, 1.29333461e-17, 9.90229041e-01,
                  -1.62444329e-02, 2.72253916e-01, -6.34165150e-02,
                  -9.70894937e-01
              ],
              [
                  4.70953269e-01, 5.30240798e-02, 4.22977531e-01,
                  1.57118092e-02, 1.87318000e-01, -5.17490509e-02,
                  2.77555756e-17
              ],
              [
                  1.15614963e-01, -3.11035580e-01, 1.07091058e-01,
                  -7.85712485e-02, 5.02116683e-02, 1.82028483e-01,
                  5.37357702e-18
              ],
              [
                  0.00000000e+00, -4.83684740e-01, 4.85654957e-03,
                  4.29077848e-01, -1.23232350e-02, -4.49212339e-02,
                  -1.31628920e-18
              ]],
             [[
                 0.00000000e+00, 7.66497386e-01, 3.84581389e-01,
                 -6.11518319e-01, 6.51623362e-01, 7.29761492e-01,
                 -3.26853053e-05
             ],
              [
                  0.00000000e+00, 6.42247427e-01, -4.58982966e-01,
                  -7.76606494e-01, -6.02864522e-01, 6.63833792e-01,
                  -2.39287048e-01
              ],
              [
                  1.00000000e+00, 1.29333461e-17, 8.00894370e-01,
                  -1.51418954e-01, 4.60370897e-01, -1.63624147e-01,
                  -9.70948870e-01
              ],
              [
                  4.70749402e-01, 2.02324586e-01, 2.32429015e-01,
                  -3.96859000e-02, 1.35276971e-01, -1.32980002e-01,
                  3.46944695e-18
              ],
              [
                  4.13957441e-01, -2.41466543e-01, 2.10383078e-01,
                  -4.24325847e-02, 1.23055855e-01, 1.37816173e-01,
                  -8.24586574e-18
              ],
              [
                  0.00000000e+00, -6.26691287e-01, 8.95795506e-03,
                  3.77905634e-01, -3.03312510e-02, -3.39598508e-02,
                  2.03203204e-18
              ]],
             [[
                 0.00000000e+00, 5.03588189e-01, 7.39456059e-01,
                 -4.02349460e-01, 7.40842738e-01, 5.91300105e-01, 2.08038486e-02
             ],
              [
                  0.00000000e+00, 8.63943827e-01, -4.31024941e-01,
                  -8.98829382e-01, -4.31228171e-01, 7.82400942e-01,
                  -2.57114920e-01
              ],
              [
                  1.00000000e+00, 1.29333461e-17, 5.17128840e-01,
                  -1.73840885e-01, 5.14970195e-01, -1.95481336e-01,
                  -9.66156880e-01
              ],
              [
                  3.94478970e-01, 1.93874223e-01, 1.07271847e-01,
                  -5.46530546e-02, 1.06788394e-01, -1.56802637e-01,
                  2.77555756e-17
              ],
              [
                  5.95425718e-01, -1.13008237e-01, 1.41973397e-01,
                  -4.49874465e-02, 1.41301074e-01, 1.10324660e-01,
                  -9.10729825e-18
              ],
              [
                  0.00000000e+00, -7.13069324e-01, -3.50565296e-02,
                  3.59096571e-01, -3.53037954e-02, -3.27361064e-02,
                  3.03576608e-18
              ]]])

        f_target = np.array([  # noqa
            [
                1.43864226e-01, 2.27873311e-04, 1.04425655e-01, 2.51097127e-04,
                -6.94303954e-02, 2.81603315e-05, 2.36050990e-01
            ],
            [
                0.15030483, 0.07073747, 0.0943568, 0.07910693, -0.07679873,
                0.02522317, 0.22653976
            ],
            [
                0.22766717, 0.34405331, -0.02931768, 0.58414815, -0.10902749,
                0.24093091, 0.02690204
            ],
            [
                0.07397675, 0.05510799, -0.0042538, 0.00091971, -0.00432864,
                -0.05131785, 0.07958691
            ],
        ])

        f_eval = []
        for i in range(4):
            f_eval.append(f(J_G_lst[i], V_G_desired, None, None, None))
        f_eval = np.array(f_eval).squeeze()

        self.assertLessEqual(np.linalg.norm(f_target - np.stack(f_eval)), 1e-6,
                             'DiffIKQP input-output response is not correct')

    @weight(6)
    @timeout_decorator.timeout(1.)
    def test_diffik_wall(self):
        """Test DiffIK_Wall"""
        f = self.notebook_locals["DiffIKQP_Wall"]

        # 1. First, test input-output responses

        V_G_desired = np.array([0., 0., 0., 0.1, 0.05, 0.])

        J_G_lst = np.array([  # noqa
            [[
                0.00000000e+00, 9.99999642e-01, 8.43914080e-05, -9.99999609e-01,
                8.50567011e-04, 9.99999615e-01, 1.91906270e-04
            ],
             [
                 0.00000000e+00, 8.45698223e-04, -9.97889975e-02,
                 -8.83795037e-04, -9.63559042e-01, 8.77572910e-04,
                 -2.39249258e-01
             ],
             [
                 1.00000000e+00, 1.29333461e-17, 9.95008617e-01,
                 -3.82071630e-06, 2.67494392e-01, -1.85924302e-05,
                 -9.70958164e-01
             ],
             [
                 4.71341522e-01, 2.66833510e-04, 4.37503593e-01, 7.08114692e-05,
                 1.94417017e-01, -1.66596020e-04, 1.04083409e-17
             ],
             [
                 4.10841658e-04, -3.15518477e-01, 3.82163932e-04,
                 -8.19873226e-02, 1.70615173e-04, 1.88851289e-01,
                 -1.35525272e-20
             ],
             [
                 0.00000000e+00, -4.71341701e-01, 1.22030242e-06,
                 4.31475983e-01, -3.61468622e-06, -4.65339956e-02,
                 5.08219768e-21
             ]],
            [[
                0.00000000e+00, 9.27708591e-01, 8.89544128e-03, -7.32302084e-01,
                6.55377121e-01, 7.53189212e-01, 2.51819045e-04
            ],
             [
                 0.00000000e+00, 3.73305198e-01, -2.21062480e-02,
                 -6.80926361e-01, -7.08121076e-01, 6.38721663e-01,
                 -2.39396195e-01
             ],
             [
                 1.00000000e+00, 1.29333461e-17, 9.99716052e-01,
                 -8.54100202e-03, 2.62764859e-01, -1.57291604e-01,
                 -9.70921932e-01
             ],
             [
                 3.38288376e-01, 1.17784064e-01, 3.31217427e-01, 5.42952346e-02,
                 1.45959645e-01, -1.27942855e-01, -1.04083409e-17
             ],
             [
                 2.65425867e-01, -2.92707653e-01, 2.62543839e-01,
                 -6.36546467e-02, 1.23777114e-01, 1.42227797e-01,
                 -3.55753838e-19
             ],
             [
                 0.00000000e+00, -4.12917888e-01, 2.85834568e-03,
                 4.19577639e-01, -3.04813535e-02, -3.51017016e-02,
                 8.55503277e-20
             ]],
            [[
                0.00000000e+00, 8.63730969e-01, -9.10369891e-02,
                -5.04424230e-01, 8.40605339e-01, 5.24305110e-01, 1.36297010e-03
            ],
             [
                 0.00000000e+00, 5.03953186e-01, 1.56029308e-01,
                 -8.58799748e-01, -4.64725405e-01, 8.27077740e-01,
                 -2.38738777e-01
             ],
             [
                 1.00000000e+00, 1.29333461e-17, 9.83548231e-01, 8.95499217e-02,
                 2.78231850e-01, -2.02599513e-01, -9.71082869e-01
             ],
             [
                 1.69758783e-01, 1.58848828e-01, 2.16147250e-01, 8.75314933e-02,
                 1.00694908e-01, -1.65622465e-01, 2.08166817e-17
             ],
             [
                 2.99717653e-01, -2.72252773e-01, 3.23482130e-01,
                 -9.10829868e-03, 1.58843612e-01, 9.89747431e-02, 1.04354459e-17
             ],
             [
                 0.00000000e+00, -2.97669584e-01, -3.13104095e-02,
                 4.05704448e-01, -3.89100525e-02, -2.45652028e-02,
                 -2.54109884e-18
             ]],
            [[
                0.00000000e+00, 8.47698513e-01, -1.25651334e-01,
                -4.35905938e-01, 8.75362019e-01, 4.52798046e-01, 1.95126924e-03
            ],
             [
                 0.00000000e+00, 5.30478304e-01, 2.00789455e-01,
                 -8.90880400e-01, -3.86705206e-01, 8.66114844e-01,
                 -2.38402458e-01
             ],
             [
                 1.00000000e+00, 1.29333461e-17, 9.71542761e-01, 1.27742424e-01,
                 2.90173086e-01, -2.11704999e-01, -9.71164487e-01
             ],
             [
                 1.20642621e-01, 1.67187658e-01, 1.80491070e-01, 9.06632662e-02,
                 8.65004401e-02, -1.73418334e-01, -3.46944695e-18
             ],
             [
                 2.99888940e-01, -2.67164044e-01, 3.30955705e-01,
                 1.29140179e-02, 1.65458565e-01, 8.54493522e-02, 1.89193279e-17
             ],
             [
                 0.00000000e+00, -2.61353147e-01, -4.50556305e-02,
                 3.99440532e-01, -4.04431417e-02, -2.13246280e-02,
                 -4.66206934e-18
             ]]
        ])

        p_now_lst = np.array([[4.10841658e-04, -4.71341522e-01, 6.56018589e-01],
                              [0.26542587, -0.33828838, 0.65601681],
                              [0.29971765, -0.16975878, 0.65570552],
                              [0.29988894, -0.12064262, 0.65566399]])

        f_target = np.array([
            [  # noqa
                0.14391804, -0.12915867, 0.10448036, -0.1425351, -0.06945252,
                -0.01337149, 0.23615799
            ],
            [
                0.16447638, 0.08276078, 0.15047509, 0.07810332, -0.08953128,
                0.05003018, 0.29131761
            ],
            [
                0.07857335, 0.11296406, 0.19831788, 0.094541, -0.0600867,
                0.03493987, 0.26598951
            ],
            [
                0.03920247, 0.0207832, 0.1252572, 0.02896471, -0.00397849,
                0.03072902, 0.16159496
            ]
        ])

        f_eval = []
        for i in range(4):
            f_eval.append(f(J_G_lst[i], V_G_desired, None, None, p_now_lst[i]))
        f_eval = np.array(f_eval).squeeze()

        self.assertLessEqual(np.linalg.norm(f_target - np.stack(f_eval)), 2e-5,
                             'DiffIKQP_Wall implementation is not correct.')

        # 2. Check that it cannot find solutions when it shouldn't.

        J_G_lst = np.array([  # noqa
            [[
                0.00000000e+00, 7.56140097e-01, 7.95003347e-02, -2.69315694e-01,
                9.22433312e-01, 3.40078094e-01, -1.92820603e-05
            ],
             [
                 0.00000000e+00, 6.54409775e-01, -9.18589440e-02,
                 -9.60694986e-01, -2.77417540e-01, 9.13139558e-01,
                 -2.39012765e-01
             ],
             [
                 1.00000000e+00, 1.29333461e-17, 9.92593387e-01,
                 -6.73364743e-02, 2.68619236e-01, -2.24773302e-01,
                 -9.71016425e-01
             ],
             [
                 1.94013938e-01, 2.06133679e-01, 1.63642143e-01, 6.77508889e-02,
                 6.48813906e-02, -1.82907255e-01, 6.93889390e-18
             ],
             [
                 4.00268741e-01, -2.38177891e-01, 3.72262156e-01,
                 -4.67765625e-02, 1.74212234e-01, 6.42289082e-02, 2.29588280e-18
             ],
             [
                 0.00000000e+00, -4.08641495e-01, 2.13440909e-02,
                 3.96391877e-01, -4.28831043e-02, -1.58061200e-02,
                 -5.65182734e-19
             ]],
            [[
                0.00000000e+00, 7.04496306e-01, 4.81943519e-02, -1.32316836e-01,
                9.54820295e-01, 2.02297436e-01, 1.58427835e-04
            ],
             [
                 0.00000000e+00, 7.09707654e-01, -4.78404632e-02,
                 -9.90355134e-01, -1.38480772e-01, 9.51023104e-01,
                 -2.38698757e-01
             ],
             [
                 1.00000000e+00, 1.29333461e-17, 9.97691633e-01,
                 -4.10969911e-02, 2.62947294e-01, -2.33732332e-01,
                 -9.71093651e-01
             ],
             [
                 1.20862242e-01, 2.23378736e-01, 1.05525579e-01, 7.88401213e-02,
                 3.83637616e-02, -1.90478540e-01, -6.93889390e-18
             ],
             [
                 4.00735166e-01, -2.21738477e-01, 3.84641068e-01,
                 -2.67698990e-02, 1.80352378e-01, 3.82022752e-02,
                 -1.35491390e-17
             ],
             [
                 0.00000000e+00, -3.69551817e-01, 1.33464785e-02,
                 3.91265419e-01, -4.43250870e-02, -9.42134952e-03,
                 3.32883948e-18
             ]],
            [[
                0.00000000e+00, 8.48951983e-01, 7.32092662e-02, -4.98413754e-01,
                8.24557735e-01, 5.52633268e-01, 3.41100634e-04
            ],
             [
                 0.00000000e+00, 5.28469991e-01, -1.17605830e-01,
                 -8.64437917e-01, -4.96124324e-01, 8.09261086e-01,
                 -2.39270556e-01
             ],
             [
                 1.00000000e+00, 1.29333461e-17, 9.90358153e-01,
                 -6.58089530e-02, 2.71965434e-01, -1.99230933e-01,
                 -9.70952874e-01
             ],
             [
                 2.91723319e-01, 1.66704769e-01, 2.51812051e-01, 5.32219754e-02,
                 1.06350005e-01, -1.62101060e-01, 1.73472348e-17
             ],
             [
                 3.58724261e-01, -2.67800153e-01, 3.32171785e-01,
                 -6.16554014e-02, 1.55736047e-01, 1.04351760e-01, 4.28259858e-18
             ],
             [
                 0.00000000e+00, -4.37234097e-01, 2.08312142e-02,
                 4.06794227e-01, -3.83404546e-02, -2.57722048e-02,
                 -1.05032085e-18
             ]]
        ])

        p_now_lst = np.array([[0.40026874, -0.19401394, 0.65549175],
                              [0.40073517, -0.12086224, 0.65524754],
                              [0.35872426, -0.29172332, 0.65594794]])

        for i in range(3):
            with self.assertRaises(ValueError):
                f(J_G_lst[i], V_G_desired, None, None, p_now_lst[i])
