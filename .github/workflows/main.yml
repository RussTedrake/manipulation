# Copyright (c) 2020, Massachusetts Institute of Technology.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

---
name: CI
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - master
  schedule:
    - cron: '0 8 * * *'
jobs:
  docker:
    name: dockerfile
    runs-on: ubuntu-latest
    container: russtedrake/manipulation:latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: submodule checkout
        run:  ./setup/submodule_checkout
        shell: bash
      - name: post-checkout setup
        # Force bazel to use user pip instead of re-downloading everything to 
        # be hermetic:
        run: |
          truncate -s0 requirements.txt 
          sed -i '/PYTHONNOUSERSITE/d' .bazelrc
        shell: bash
      - name: test
        run: ./htmlbook/workflows/ci/jammy/test
        shell: bash
  # focal:
  #   name: ubuntu 20.04 focal
  #   runs-on: ubuntu-20.04
  #   container: ubuntu:20.04
  #   steps:
  #     - name: pre-checkout setup
  #       run: |
  #         export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 DEBIAN_FRONTEND=noninteractive
  #         apt-get update -o APT::Acquire::Retries=4 -qq
  #         apt-get install -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 -qy --no-install-recommends ca-certificates gnupg
  #         apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E1DD270288B4E6030699E45FA1715D88E1DF1F24
  #         echo 'deb http://ppa.launchpad.net/git-core/ppa/ubuntu focal main' > /etc/apt/sources.list.d/git.list
  #         apt-get update -o APT::Acquire::Retries=4 -qq
  #         apt-get install -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 -qy --no-install-recommends git
  #         rm -rf /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin /var/lib/apt/lists/* /var/log/apt/*
  #       shell: bash
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: submodule checkout
  #       run:  ./setup/submodule_checkout
  #       shell: bash
  #     - name: post-checkout setup
  #       run: ./htmlbook/workflows/ci/focal/setup
  #       shell: bash
  #     - name: Check disk space
  #       run: |
  #         dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -nr | head
  #         df . -h
  #         du /usr/ -hx -d 4 --threshold=1G | sort -hr | head
  #       shell: bash
  #     - name: test
  #       run: ./htmlbook/workflows/ci/focal/test
  #       shell: bash
  jammy:
    name: ubuntu 22.04 jammy
    runs-on: ubuntu-22.04
    container: ubuntu:22.04
    steps:
      - name: pre-checkout setup
        run: |
          export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 DEBIAN_FRONTEND=noninteractive
          apt-get update -o APT::Acquire::Retries=4 -qq
          apt-get install -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 -qy --no-install-recommends ca-certificates gnupg
          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E1DD270288B4E6030699E45FA1715D88E1DF1F24
          echo 'deb http://ppa.launchpad.net/git-core/ppa/ubuntu focal main' > /etc/apt/sources.list.d/git.list
          apt-get update -o APT::Acquire::Retries=4 -qq
          apt-get install -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 -qy --no-install-recommends git
          rm -rf /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin /var/lib/apt/lists/* /var/log/apt/*
        shell: bash
      - name: checkout
        uses: actions/checkout@v2
      - name: submodule checkout
        run:  ./setup/submodule_checkout
        shell: bash
      - name: post-checkout setup
        run: ./htmlbook/workflows/ci/jammy/setup
        shell: bash
      - name: Check disk space
        run: |
          dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -nr | head
          df . -h
          du /usr/ -hx -d 4 --threshold=1G | sort -hr | head
        shell: bash
      - name: test
        run: ./htmlbook/workflows/ci/jammy/test
        shell: bash
  jammy-pip:
    # This should emulate a student's experience if they are doing the psets
    # via pip install manipulation.
    #
    # TODO(russt): Revisit the pip3 install -r requirements.txt below. Maybe I
    # need to separate out testing requirements from notebook requirements.
    name: pip on jammy
    runs-on: ubuntu-22.04
    container: ubuntu:22.04
    steps:
      - name: pre-checkout setup
        run: |
          apt-get update -o APT::Acquire::Retries=4 -qq
          apt-get install -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 -qy --no-install-recommends python3-pip git xvfb
          pip3 install manipulation --extra-index-url https://drake-packages.csail.mit.edu/whl/nightly/
        shell: bash
      - name: checkout
        uses: actions/checkout@v2
      - name: submodule checkout
        run:  ./setup/submodule_checkout
        shell: bash
      - name: post-checkout setup
        # Force bazel to use user pip instead of re-downloading everything to
        # be hermetic. Also apply patches to avoid bazel dependency on
        # installed drake.
        run: |
          ./setup/ubuntu/22.04/install_prereqs.sh
          pip3 install -r requirements.txt  # poetry does not publish dependency groups https://github.com/python-poetry/poetry/issues/6727
          truncate -s0 requirements.txt
          sed -i '/PYTHONNOUSERSITE/d' .bazelrc
          git apply setup/pip_ci.patch
          ( cd htmlbook && git apply workflows/ci/pip_ci.patch )
        shell: bash
      - name: test
        run: DRAKE_RESOURCE_ROOT=`python3 -c "from pathlib import Path; from pydrake.all import GetDrakePath; print(Path(GetDrakePath()).parent)"` ./htmlbook/workflows/ci/jammy/test_w_installed_deps
        shell: bash
  monterey:
    name: macos monterey 12
    runs-on: macos-12
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: submodule checkout
        run:  ./setup/submodule_checkout
        shell: zsh -efuo pipefail {0}
      - name: setup
        run: ./htmlbook/workflows/ci/monterey/setup
        shell: zsh -efuo pipefail {0}
      - name: test
        run: ./htmlbook/workflows/ci/monterey/test
        shell: zsh -efuo pipefail {0}
