--- manipulation/exercises/segmentation/test_segmentation_and_grasp.py	(original)
36
+++ manipulation/exercises/segmentation/test_segmentation_and_grasp.py	(reformatted)
37
@@ -4,21 +4,22 @@
38
 import numpy as np
39
 from manipulation.utils import LoadDataResource
40
 
41
+
42
 def chamfer_dist(pc_a, pc_b):
43
     """
44
     pc_a of Size(3, N)
45
     pc_b of Size(3, M)
46
     """
47
-    diff = np.linalg.norm(pc_a[:, :, None] - pc_b[:, None], axis=0) ** 2
48
+    diff = np.linalg.norm(pc_a[:, :, None] - pc_b[:, None], axis=0)**2
49
     dist = np.mean(np.min(diff, axis=0)) + np.mean(np.min(diff, axis=1))
50
     return dist
51
+
52
 
53
 class TestSegmentationAndGrasp(unittest.TestCase):
54
 
55
     def __init__(self, test_name, notebook_locals):
56
         super().__init__(test_name)
57
         self.notebook_locals = notebook_locals
58
-
59
 
60
     @weight(4)
61
     @timeout_decorator.timeout(10.)
62
@@ -33,7 +34,8 @@
63
         project_depth_to_pC_funcs = [c.project_depth_to_pC for c in cameras]
64
         X_WCs = [c.X_WC for c in cameras]
65
 
66
-        pcd_eval = get_merged_masked_pcd(predictions, rgb_ims, depth_ims, project_depth_to_pC_funcs, X_WCs)
67
+        pcd_eval = get_merged_masked_pcd(predictions, rgb_ims, depth_ims,
68
+                                         project_depth_to_pC_funcs, X_WCs)
69
         pcd_pts_eval = np.asarray(pcd_eval.xyzs()[:])
70
         pcd_colors_eval = np.asarray(pcd_eval.rgbs()[:])
71
         pcd_pts_eval = pcd_pts_eval.T
72
@@ -54,5 +56,6 @@
73
         min_num_pts = min(num_points_eval, num_points_target)
74
 
75
         self.assertLessEqual(
76
-            chamfer_dist(pcd_pts_target[:min_num_pts,:] - pcd_pts_eval[:min_num_pts,:]), 1e-4,
77
+            chamfer_dist(pcd_pts_target[:min_num_pts, :]
78
+                         - pcd_pts_eval[:min_num_pts, :]), 1e-4,
79
             "Point cloud points are not close enough to the solution values.")